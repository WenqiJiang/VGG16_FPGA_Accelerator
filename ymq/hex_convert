import numpy as np
#from decimal import *

class solution:

    def float_to_fix(self, W):
        """
        :param W: the weights for one layer
        :return: the new fixed point weights
        """
        max_w = np.max(W)
        min_w = np.min(W)
        length_w_int_1, length_w_int_0 = 0, 0
        if min_w < 0:
            min_w_int = int(min_w)
            length_w_int_1 = len(bin(min_w_int)) - 3 # eg: -0b
        if max_w > 0:
            max_w_int = int(max_w)
            length_w_int_0 = len(bin(max_w_int)) - 2  # 0b
        length_w_int = max(length_w_int_1, length_w_int_0)

        length_w_decimal = 16 - length_w_int - 1 # need one position to add sign
        #getcontext().prec = length_w_decimal
        #print(length_w_int)
        #print(length_w_decimal)
        for i in range(len(W)):
            for j in range(len(W[0])):
                W[i][j] = self.dec_to_bin(W[i][j], length_w_int, length_w_decimal)
        return W

    def add_1(self, complement):
        n = len(complement)
        carry = 1
        i = n - 1
        complement = list(complement)

        while i > 0 and carry:
            if complement[i] == '0' and carry == 1:
                complement[i] = '1'
                carry = 0
            if complement[i] == '1' and carry == 1:
                complement[i] = '0'
            i -= 1
            #print(carry)

        return "".join(complement)


    @staticmethod
    def decimal_dec_to_bin(x, decimal_digit):
        """
        :param x: is the original number
        :param decimal_digit: the number of digits of decimal part.
        :return:
        """
        x -= int(x)
        bins = ""
        i = 0
        while x and i < decimal_digit:
            x *= 2
            bins += "1" if x >= 1. else "0"
            x -= int(x)
            i += 1
        return bins

    def dec_to_bin(self, x, int_digit, decimal_digit):
        """
        :param x: original number
        :param int_digit: the number of digits of integer part.
        :param decimal_digit: the number of digits of decimal part.
        :return:
        """
        decimal = self.decimal_dec_to_bin(x, decimal_digit)
        if x >= 0:  # true form = complement
            integer = bin(int(x))[2:]
            add_zero_int = int_digit - len(integer)
            add_zero_integer_complement ="0" + "0" * add_zero_int + integer
        if x < 0:
            integer = bin(int(x))[3:]
            #print("integer: ", integer)
            add_zero_int = int_digit - len(integer)
            #print("add zero:", add_zero_int)
            add_zero_integer_true = "1" + "0" * add_zero_int + integer # true form
            """
            print("add_zero_integer: ", add_zero_integer)
            print("join content: ", [int(r) for r in add_zero_integer[1:]])
            print("join content: ", [~int(r) for r in add_zero_integer[1:]])
            print("join content: ", [0 if int(r) == 1 else 1 for r in add_zero_integer[1:]])
            """

            add_zero_integer_reverse = "1" + "".join(str(0 if int(r) == 1 else 1) for r in add_zero_integer_true[1:]) # radix-minus-one complement
            add_zero_integer_complement = self.add_1(add_zero_integer_reverse)
            #print(add_zero_integer_complement)

             # radix-minus-one complement
        add_zero_dec = decimal_digit - len(decimal)
        add_zero_dec = decimal + "0" * add_zero_dec

        return add_zero_integer_complement + "." + add_zero_dec


W = [[2.34211241, 2001.234122123, 3.4232141], [-100.26437630275362408576437645278, 2000.12121312, 0.000000012311]]
#W = [[-5],[-1000],[5],[-10]]

sol = solution()
print(sol.float_to_fix(W))
#complement = "1111"
#print(sol.add_1(complement))
#dec = -1000
# print(bin(-100000))
# print(bin(-1000))
# print(bin(-9))
# print(bin(-1))
# print(bin(-5))
# print(bin(-1000))
# print(bin(1000))

c = bin(int('11111111011',2) + int('11111111011',2))
print(c)